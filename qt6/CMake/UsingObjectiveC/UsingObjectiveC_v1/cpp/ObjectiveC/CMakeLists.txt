cmake_minimum_required(VERSION 3.14)

set(A_DIR_MODULE_ROOT ${CMAKE_CURRENT_SOURCE_DIR})
set(A_NAME_TARGET AObjectiveC)

option(A_OPTION_USING_PCH "${A_NAME_TARGET} using PCH support" ON)
#add_compile_options(-x objective-c++)
#set(CMAKE_EXE_LINKER_FLAGS "
#	-framework Foundation
#	-framework UIKit
#")

set(SOURCES_RESOURCES

)

set(SOURCES_HEADERS
	${A_DIR_MODULE_ROOT}/aobjectivecpch.h
	${A_DIR_MODULE_ROOT}/aobjectivec.h
)

set(SOURCES_CPP
	${A_DIR_MODULE_ROOT}/aobjectivec.cpp
)

set(SOURCES_OBJECTIVE_HEADERS
	${A_DIR_MODULE_ROOT}/aobjectivecnative.h
	${A_DIR_MODULE_ROOT}/aobjectivecnativeglobal.h
)

set(SOURCES_OBJECTIVE_CPP
	${A_DIR_MODULE_ROOT}/aobjectivecnative.mm
)

set(SOURCES_PRECOMPILED_HEADERS_PUBLIC

)

set(SOURCES_PRECOMPILED_HEADERS_PRIVATE

)

set(SOURCES
	${SOURCES_RESOURCES}
	${SOURCES_HEADERS}
	${SOURCES_CPP}
	${SOURCES_OBJECTIVE_HEADERS}
	${SOURCES_OBJECTIVE_CPP}
	${SOURCES_PRECOMPILED_HEADERS_PUBLIC}
	${SOURCES_PRECOMPILED_HEADERS_PRIVATE}
)

add_library(${A_NAME_TARGET} STATIC ${SOURCES})

if(
	NOT ${SOURCES_PRECOMPILED_HEADERS_PUBLIC} EQUAL "" OR
	NOT ${SOURCES_PRECOMPILED_HEADERS_PRIVATE} EQUAL ""
)
	if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.16 AND A_OPTION_USING_PCH)
		message(STATUS "Using PCH for ${A_NAME_TARGET}")
		target_precompile_headers(${A_NAME_TARGET}
			PRIVATE ${PRECOMPILED_HEADERS_PRIVATE}
			PUBLIC ${PRECOMPILED_HEADERS_PUBLIC}
		)
		set(CMAKE_PCH_INSTANTIATE_TEMPLATES ON)
	else()
		message(STATUS "No PCH for ${A_NAME_TARGET}")
	endif()
endif()

target_include_directories(${A_NAME_TARGET} PUBLIC ${A_DIR_MODULE_ROOT})
target_link_libraries(${A_NAME_TARGET}
	PRIVATE
		Qt${QT_VERSION_MAJOR}::Core
	PUBLIC
		ALogger
)
