cmake_minimum_required(VERSION 3.14)

set(A_MODULE_DIR_ROOT ${CMAKE_CURRENT_LIST_DIR})

set(A_TARGET_INCLUDE_DIRECTORIES_PUBLIC
	${A_TARGET_INCLUDE_DIRECTORIES_PUBLIC}
	${A_MODULE_DIR_ROOT}
	PARENT_SCOPE
)

set(A_SOURCES_CPP_HEADERS
	${A_SOURCES_CPP_HEADERS}
	${A_MODULE_DIR_ROOT}/aswift.cpp
	PARENT_SCOPE
)

set(A_SOURCES_CPP
	${A_SOURCES_CPP}
	${A_MODULE_DIR_ROOT}/aswift.h
	PARENT_SCOPE
)

if(IOS)

	set(A_SOURCES_OBJECTIVE_HEADERS
		${A_SOURCES_OBJECTIVE_HEADERS}
		${A_MODULE_DIR_ROOT}/aswiftiosnative.h
		${A_MODULE_DIR_ROOT}/aswiftiosobjc.h
		PARENT_SCOPE
	)

	set(A_SOURCES_OBJECTIVE_CPP
		${A_SOURCES_OBJECTIVE_CPP}
		${A_MODULE_DIR_ROOT}/aswiftiosnative.mm
		PARENT_SCOPE
	)

	set(A_SOURCES_SWIFT
		${A_SOURCES_SWIFT}
		${A_MODULE_DIR_ROOT}/aswiftiosswift.swift
		PARENT_SCOPE
	)

endif()


#set(SOURCES_CPP
#	aswift.cpp
#)

#set(SOURCES_HEADERS
#	aswift.h
#)

#set(SOURCES_OBJECTIVE_CPP
#	aswiftiosnative.mm
#)

#set(SOURCES_OBJECTIVE_HEADERS
#	aswiftbridging.h
#	aswiftiosnative.h
#	aswiftiosobjc.h
#)

#set(SOURCES_SWIFT
#	aswiftiosswift.swift
#)

#set(SOURCES_PRECOMPILED_HEADERS_PUBLIC

#)

#set(SOURCES_PRECOMPILED_HEADERS_PRIVATE

#)

#set(SOURCES
#	${SOURCES_RESOURCES}
#	${SOURCES_CPP}
#	${SOURCES_HEADERS}
#	${SOURCES_OBJECTIVE_CPP}
#	${SOURCES_OBJECTIVE_HEADERS}
#	${SOURCES_SWIFT}
#	${SOURCES_PRECOMPILED_HEADERS_PUBLIC}
#	${SOURCES_PRECOMPILED_HEADERS_PRIVATE}
#)

#add_library(${A_NAME_TARGET} SHARED ${SOURCES})

#if(
#	NOT ${SOURCES_PRECOMPILED_HEADERS_PUBLIC} EQUAL "" OR
#	NOT ${SOURCES_PRECOMPILED_HEADERS_PRIVATE} EQUAL ""
#)
#	if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.16 AND A_OPTION_USING_PCH)
#		message(STATUS "Using PCH for ${A_NAME_TARGET}")
#		target_precompile_headers(${A_NAME_TARGET}
#			PRIVATE ${PRECOMPILED_HEADERS_PRIVATE}
#			PUBLIC ${PRECOMPILED_HEADERS_PUBLIC}
#		)
#		set(CMAKE_PCH_INSTANTIATE_TEMPLATES ON)
#	else()
#		message(STATUS "No PCH for ${A_NAME_TARGET}")
#	endif()
#endif()

#target_include_directories(${A_NAME_TARGET}
#	PUBLIC
#		${A_DIR_MODULE_ROOT}
#)

#target_link_libraries(${A_NAME_TARGET}
#	PRIVATE
#		Qt${QT_VERSION_MAJOR}::Core
#		ALogger
#	PUBLIC
#)
